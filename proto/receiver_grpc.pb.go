// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/receiver.proto

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReceiverService_CreateReceiver_FullMethodName   = "/ReceiverService/CreateReceiver"
	ReceiverService_RetrieveReceiver_FullMethodName = "/ReceiverService/RetrieveReceiver"
	ReceiverService_UpdateReceiver_FullMethodName   = "/ReceiverService/UpdateReceiver"
	ReceiverService_DeleteReceiver_FullMethodName   = "/ReceiverService/DeleteReceiver"
)

// ReceiverServiceClient is the client API for ReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverServiceClient interface {
	CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverResponse, error)
	RetrieveReceiver(ctx context.Context, in *RetrieveReceiverRequest, opts ...grpc.CallOption) (*RetrieveReceiverResponse, error)
	UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverResponse, error)
	DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverResponse, error)
}

type receiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServiceClient(cc grpc.ClientConnInterface) ReceiverServiceClient {
	return &receiverServiceClient{cc}
}

func (c *receiverServiceClient) CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverResponse, error) {
	out := new(CreateReceiverResponse)
	err := c.cc.Invoke(ctx, ReceiverService_CreateReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) RetrieveReceiver(ctx context.Context, in *RetrieveReceiverRequest, opts ...grpc.CallOption) (*RetrieveReceiverResponse, error) {
	out := new(RetrieveReceiverResponse)
	err := c.cc.Invoke(ctx, ReceiverService_RetrieveReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverResponse, error) {
	out := new(UpdateReceiverResponse)
	err := c.cc.Invoke(ctx, ReceiverService_UpdateReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverResponse, error) {
	out := new(DeleteReceiverResponse)
	err := c.cc.Invoke(ctx, ReceiverService_DeleteReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServiceServer is the server API for ReceiverService service.
// All implementations must embed UnimplementedReceiverServiceServer
// for forward compatibility
type ReceiverServiceServer interface {
	CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverResponse, error)
	RetrieveReceiver(context.Context, *RetrieveReceiverRequest) (*RetrieveReceiverResponse, error)
	UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverResponse, error)
	DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverResponse, error)
	mustEmbedUnimplementedReceiverServiceServer()
}

// UnimplementedReceiverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceiverServiceServer struct {
}

func (UnimplementedReceiverServiceServer) CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceiver not implemented")
}
func (UnimplementedReceiverServiceServer) RetrieveReceiver(context.Context, *RetrieveReceiverRequest) (*RetrieveReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveReceiver not implemented")
}
func (UnimplementedReceiverServiceServer) UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiver not implemented")
}
func (UnimplementedReceiverServiceServer) DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiver not implemented")
}
func (UnimplementedReceiverServiceServer) mustEmbedUnimplementedReceiverServiceServer() {}

// UnsafeReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServiceServer will
// result in compilation errors.
type UnsafeReceiverServiceServer interface {
	mustEmbedUnimplementedReceiverServiceServer()
}

func RegisterReceiverServiceServer(s grpc.ServiceRegistrar, srv ReceiverServiceServer) {
	s.RegisterService(&ReceiverService_ServiceDesc, srv)
}

func _ReceiverService_CreateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).CreateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_CreateReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).CreateReceiver(ctx, req.(*CreateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_RetrieveReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).RetrieveReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_RetrieveReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).RetrieveReceiver(ctx, req.(*RetrieveReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_UpdateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).UpdateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_UpdateReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).UpdateReceiver(ctx, req.(*UpdateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_DeleteReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).DeleteReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_DeleteReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).DeleteReceiver(ctx, req.(*DeleteReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiverService_ServiceDesc is the grpc.ServiceDesc for ReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReceiverService",
	HandlerType: (*ReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceiver",
			Handler:    _ReceiverService_CreateReceiver_Handler,
		},
		{
			MethodName: "RetrieveReceiver",
			Handler:    _ReceiverService_RetrieveReceiver_Handler,
		},
		{
			MethodName: "UpdateReceiver",
			Handler:    _ReceiverService_UpdateReceiver_Handler,
		},
		{
			MethodName: "DeleteReceiver",
			Handler:    _ReceiverService_DeleteReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/receiver.proto",
}
