// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: customers.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (
    customer_id, customer_address_id, name, last_name, email, phone_number
) VALUES (
    $1, $2, $3, $4, $5, $6
)ON CONFLICT DO NOTHING
`

type CreateCustomerParams struct {
	CustomerID        uuid.UUID
	CustomerAddressID uuid.UUID
	Name              string
	LastName          string
	Email             string
	PhoneNumber       string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.CustomerID,
		arg.CustomerAddressID,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
	)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT customer_id, customer_address_id, name, last_name, email, phone_number, address_id, country, street, city, zip_code FROM customers JOIN addresses a ON a.address_id = customers.customer_address_id
ORDER BY customer_id
`

type GetAllCustomersRow struct {
	CustomerID        uuid.UUID
	CustomerAddressID uuid.UUID
	Name              string
	LastName          string
	Email             string
	PhoneNumber       string
	AddressID         uuid.UUID
	Country           string
	Street            string
	City              string
	ZipCode           string
}

func (q *Queries) GetAllCustomers(ctx context.Context) ([]GetAllCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCustomersRow
	for rows.Next() {
		var i GetAllCustomersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.CustomerAddressID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.AddressID,
			&i.Country,
			&i.Street,
			&i.City,
			&i.ZipCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
